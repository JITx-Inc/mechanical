#use-added-syntax(jitx)
defpackage mechanical/MountingHoles:
  import core
  import jitx
  import jitx/commands
  import maybe-utils

  import jsl/ensure
  import jsl/landpatterns with :
    prefix(SilkscreenOutline) => UNUSED#
  import jsl/geometry/basics
  import jsl/symbols/framework
  import jsl/errors

; I want to be able to support 2 types of
;   mounting hole:
; 1.  Non-plated Through-holes
; 2.  Plated Grounding Through-holes

;TODO replace with jsl
public defstruct SilkscreenOutline :
  diam:Double with:
    ensure => ensure-positive!
  silk-width:Double with:
    ensure => ensure-positive!
with:
  printer => true
  keyword-constructor => true

doc: \<DOC>
A struct parameterizing mounting holes.
Constructor is `#MountingHole`, or the
other convenience constructors.
<DOC>
public defstruct MountingHole :
  hole:Shape
  doc: \<DOC>
  Shape of copper landing for plated through-holes
  If this value is `None()`, then the hole will be
  unplated.
  <DOC>
  copper:Maybe<Shape> with:
    default => None()
  doc: \<DOC>
  Silkscreen outline.
  If this value is `None()`, then the hole will not
  have an outline.
  <DOC>
  silk-outline:Maybe<SilkscreenOutline> with:
    default => None()
  doc: \<DOC>
  Amount by which the soldermask should expand
  relative to the copper layer.
  If this value is `None()`, then the hole will
  not have soldermask.
  <DOC>
  sm-expand?:Maybe<Double> with:
    ensure => ensure-non-negative!
    default => None()
  doc: \<DOC>
  Shape of the paste layer.
  If this value is `None()`, then the hole will be
  unplated.
  <DOC>
  paste:Maybe<Shape> with:
    default => None()
  symbol:MHSymbol
with:
  printer => true
  constructor => #MountingHole

doc: \<DOC>
A constructor for the MountingHole type

@param hole The shape of the hole
@param copper The shape of the copper layer. Optional if the hole should not be plated.
@param silk-outline A `SilkscreenOutline`. Optional.
@param sm-expand? The amount by which to expand the soldermask layer relative to the hole. Optional.
@param paste The shape of the paste layer. Optional.
@param symbol An MHSymbol value parameterizing the schematic symbol. Optional, it will default to either the built-in plated or non-plated symbol based on the `copper` argument.
<DOC>
public defn MountingHole (
  hole:Shape --
  copper:Shape|False = false
  silk-outline:SilkscreenOutline|False = false
  sm-expand?:Double|False = false
  paste:Shape|False = false
  symbol:MHSymbol|False = false
) :
  val symbol* =
    match(symbol:MHSymbol) : symbol
    else : MHSymbol(plated? = copper is Shape)
  #MountingHole(hole, to-maybe(copper), to-maybe(silk-outline), to-maybe(sm-expand?), to-maybe(paste), symbol*)

; TODO: default offset value; I made this up
val DEFAULT-OFFSET = 3.0

doc: \<DOC>
Add mounting holes to a pcb-module

@param get-mounting-hole A function computing a `MountingHole` from grid coordinates. Return type is a `Maybe` in order to omit holes at a given point.
@param grid-planner A `GridPlanner` describing the abstract grid on which mounting holes will be placed.
<DOC>
public defn add-mounting-holes (
  get-mounting-hole:(Int, Int) -> Maybe<MountingHole>
  grid-planner:GridPlanner
  ) -> False :

  inside pcb-module :
    for pos in grid(grid-planner) :
      match(get-mounting-hole(column(pos), row(pos))) :
        (h:One) :
          inst hole : mounting-hole(value(h))
          place(hole) at pose(pos) on Top
        (otherwise) : false

doc: \<DOC>
Add mounting holes to a pcb-module

@param get-mounting-hole A function computing a `MountingHole` from grid coordinates. Return type is a `Maybe` in order to omit holes at a given point.
@param board-shape The shape of the board
@param offset The amount by which holes should be inset from the board edge. If a Double is provided, x- and y-offsets will be identical. 
@param num-rows Number of rows in the grid of mounting holes. Default is 2.
@param num-columns Number of columns in the grid of mounting holes. Default is 2.
<DOC>
public defn add-mounting-holes (
    get-mounting-hole:(Int, Int) -> Maybe<MountingHole>
    board-shape:Shape --
    offset:Double|Dims = DEFAULT-OFFSET
    num-rows:Int = 2
    num-columns:Int = 2) :

  val [x-offset, y-offset] =
    match(offset) : 
      (offset:Double) : [offset, offset]
      (offset:Dims) : [x(offset), y(offset)]

  if num-rows < 2 : throw(ArgumentError("num-rows must be at least 2"))
  if num-columns < 2 : throw(ArgumentError("num-columns must be at least 2"))
  val d = dims(board-shape)
  val board = Rectangle(x(d), y(d))
  val w = width(board)
  val h = height(board)
  val dx = (w - (2.0 * x-offset)) / to-double(num-columns - 1)
  val dy = (h - (2.0 * y-offset)) / to-double(num-rows - 1)

  val gp = GridPlanner(
    pitch = Dims(dx, dy)
    columns = num-columns
    rows = num-rows
  )
  add-mounting-holes(get-mounting-hole, gp)


doc: \<DOC>
Add mounting holes to a pcb-module
Usable with jitx >= 3.18; computes board shape automatically.

@param get-mounting-hole A function computing a `MountingHole` from grid coordinates. Return type is a `Maybe` in order to omit holes at a given point.
@param offset The amount by which holes should be inset from the board edge. Will be used for vertical and horizontal offsets. Default value is 3.0
@param num-rows Number of rows in the grid of mounting holes. Default is 2.
@param num-columns Number of columns in the grid of mounting holes. Default is 2.
<DOC>
public defn add-mounting-holes (
    get-mounting-hole:(Int, Int) -> Maybe<MountingHole> --
    offset:Double|Dims = DEFAULT-OFFSET
    num-rows:Int = 2
    num-columns:Int = 2) :
  val board-shape =
    match(get-board()) :
      (b:Board) : get-boundary(b)
      (otherwise) : throw(Exception("add-mounting-holes: board has not yet been set."))
  add-mounting-holes(get-mounting-hole, board-shape, offset = offset, num-rows = num-rows, num-columns = num-columns)

doc: \<DOC>
Add mounting holes to a pcb-module.
Usable with jitx >= 3.18; computes board shape automatically.

@param mounting-hole A MountingHole parameterizing all holes. Will generate holes uniformly according to a grid on the board.
@param offset The amount by which holes should be inset from the board edge. If a Double is provided, x- and y-offsets will be identical.
@param num-rows Number of rows in the grid of mounting holes. Default is 2.
@param num-columns Number of columns in the grid of mounting holes. Default is 2.
<DOC>
public defn add-mounting-holes (
    mounting-hole:MountingHole --
    offset:Double|Dims = DEFAULT-OFFSET
    num-rows:Int = 2
    num-columns:Int = 2) :
  within (x, y) = add-mounting-holes(offset = offset, num-rows = num-rows, num-columns = num-columns) :
    One(mounting-hole)

doc: \<DOC>
Add mounting holes to a pcb-module.
Usable with jitx >= 3.18; computes board shape automatically.

@param mounting-hole A MountingHole parameterizing all holes. Will generate holes uniformly according to a grid on the board.
@param offset The amount by which holes should be inset from the board edge. Will be used for vertical and horizontal offsets. Default value is 3.0
@param num-rows Number of rows in the grid of mounting holes. Default is 2.
@param num-columns Number of columns in the grid of mounting holes. Default is 2.
<DOC>
public defn add-mounting-holes (
    mounting-hole:MountingHole
    board-shape:Shape --
    offset:Double = DEFAULT-OFFSET
    num-rows:Int = 2
    num-columns:Int = 2) :
  within (x, y) = add-mounting-holes(board-shape, offset = offset, num-rows = num-rows, num-columns = num-columns) :
    One(mounting-hole)

; Mounting hole component
defn mounting-hole (mh:MountingHole) :
  pcb-component comp :
    pin-properties:
      [pin:Ref | pads:Ref ...]
      [p       | p           ]

    ; Schematic symbol
    assign-symbol(create-symbol(symbol(mh)))

    ; Assign landpattern
    assign-landpattern(mounting-hole-pkg(mh))
  comp



;=========================
; Landpattern helpers
;=========================

; TODO : use virtual landpattern, jsl silkscreen

; Add a silkscreen layer to the mounting hole landpattern
defn make-silkscreen (mh:MountingHole) :
  inside pcb-landpattern :
    match(silk-outline(mh)) :
      (silk:One) :
        layer(Silkscreen("mounting-hole", Top)) = value(silk)
      (otherwise) : false ; do nothing

; Landpattern dispatcher
defn mounting-hole-pkg (mh:MountingHole) :
  match(copper(mh):One) : plated-mounting-hole-pkg(mh)
  else : non-plated-mounting-hole-pkg(mh)

; Landpattern for non-plated mounting holes
defn non-plated-mounting-hole-pkg (mh:MountingHole) :
  ; TODO : does non-plated pad need paste?
  pcb-landpattern lp :
    val sm =
      match(sm-expand?(mh)) :
        (x:One) : expand(hole(mh), value(x))
        (otherwise) : false
    pad p : npth-pad(/hole(mh), sm) at loc(0.0, 0.0)
    make-silkscreen(mh)
  lp

; Landpattern for plated mounting holes
defn plated-mounting-hole-pkg (mh:MountingHole) :
  pcb-landpattern lp :
    val sm =
      match(sm-expand?(mh)) :
        (x:One) : expand(hole(mh), value(x))
        (otherwise) : false
    val paste =
      match(/paste(mh)) :
        (p:One) : value(p)
        (otherwise) : false
    val mh-pad = pth-pad(/hole(mh), value!(/copper(mh)), sm, paste)
    pad p : mh-pad at loc(0.0, 0.0)
    make-silkscreen(mh)
  lp




;=========================
; Symbol helpers
;=========================

doc: \<DOC>
An abstract type parameterizing schematic symbols for mounting holes
All symbols will be two concentric circles.
<DOC>
public deftype MHSymbol <: SymbolDefn

doc: \<DOC>
Radius of the inner circle
<DOC>
public defmulti inner-radius (mh:MHSymbol) -> Double

doc: \<DOC>
Radius of the outer circle
<DOC>
public defmulti outer-radius (mh:MHSymbol) -> Double

defmethod build-pins (mh:MHSymbol, sn:SymbolNode) :
  add-pin(sn, Ref(`p), Point(0.0, 0.0), name = "pin-1")

; TODO : add reference designator
defmethod build-params (mh:MHSymbol, sn:SymbolNode) : 
  false

; helper
defn shift-up (mh:MHSymbol) : Pose(Point(0.0, outer-radius(mh)), 0.0, false)

doc: \<DOC>
A plated mounting hole symbol
<DOC>
public defstruct PlatedMHSymbol <: MHSymbol :
  inner-radius:Double with:
    as-method => true
    default => 0.25
    ensure => ensure-positive!
  outer-radius:Double with:
    as-method => true
    default => 0.5
    ensure => ensure-positive!
with:
  printer => true
  keyword-constructor => true

defmethod name (mh:PlatedMHSymbol) : "PlatedMountingHole"
defmethod build-artwork (mh:PlatedMHSymbol, sn:SymbolNode) :
  add-glyph(sn, shift-up(mh) * Circle(outer-radius(mh)))
  add-glyph(sn, shift-up(mh) * Circle(inner-radius(mh)))

doc: \<DOC>
A non-plated mounting hole symbol.
<DOC>
public defstruct NonPlatedMHSymbol <: MHSymbol :
  inner-radius:Double with:
    as-method => true
    default => 0.25
    ensure => ensure-positive!
  outer-radius:Double with:
    as-method => true
    default => 0.5
    ensure => ensure-positive!
  line-width:Double with:
    default => 0.05
    ensure => ensure-positive!
with:
  printer => true
  keyword-constructor => true

defmethod name (mh:NonPlatedMHSymbol) : "NonPlatedMountingHole"
defmethod build-artwork (mh:NonPlatedMHSymbol, sn:SymbolNode) :
  val arc1 = Arc(Point(0.0, 0.0), inner-radius(mh), 0.0, 360.0)
  val arc2 = Arc(Point(0.0, 0.0), outer-radius(mh), 0.0, 360.0)
  val lw = line-width(mh)
  add-glyph(sn, shift-up(mh) * Polyline(lw, [arc1]))
  add-glyph(sn, shift-up(mh) * Polyline(lw, [arc2]))

defn MHSymbol (-- plated?:True|False) :
  if plated? : PlatedMHSymbol()
  else : NonPlatedMHSymbol()

